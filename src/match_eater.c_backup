#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <math.h>
#include <gsl/gsl_sort.h>
#include <gsl/gsl_statistics.h>
#include "fitsio.h"
#include "fitsfile_read_check.h"
#include "vast_limits.h"
//#include "vast_math.h"

/*
int fitsfile_read_check(char *fitsfilename){
 int status = 0; //for cfitsio routines
 fitsfile *fptr; // pointer to the FITS file; defined in fitsio.h 
 fits_open_file(&fptr, fitsfilename, READONLY, &status);
 fits_report_error(stderr, status);  // print out any error messages 
 if (0 != status)
  return status;
 fits_close_file(fptr, &status);
 return status;
}
*/                                                                

int main(int argc, char **argv){
 //double X,Y,X0,Y0,A,A0,D,D0;
 double CD1_1,CD1_2,CD2_1,CD2_2,CRPIX1,CRVAL1,CRPIX2,CRVAL2;
 /* Для чтения фитсов */
 fitsfile *fptr;       /* pointer to the FITS file; defined in fitsio.h */
 int status = 0;
 /* Что и на что меняем*/
 char update_key_name[256];
 char update_key_value[256];
// double n_update_key_value;
 char update_key_comment[256];
 
 double LONPOLE=180;
 double LATPOLE=-90;
 double EQUINOX=2000.0;
 double EPOCH=2000.0;

 FILE *matchfile;

 double *arr_X;
 double *arr_Y;
 double *arr_A;
 double *arr_D;
 double *arr_CD1_1;
 double *arr_CD1_2;
 double *arr_CD2_1;
 double *arr_CD2_2;
 
 double *arr_tst;
 double *arr_tst2;
 
 arr_X=malloc(MAX_NUMBER_OF_STARS*sizeof(double));
 arr_Y=malloc(MAX_NUMBER_OF_STARS*sizeof(double));
 arr_A=malloc(MAX_NUMBER_OF_STARS*sizeof(double));
 arr_D=malloc(MAX_NUMBER_OF_STARS*sizeof(double));
 arr_CD1_1=malloc(MAX_NUMBER_OF_STARS*sizeof(double));
 arr_CD1_2=malloc(MAX_NUMBER_OF_STARS*sizeof(double));
 arr_CD2_1=malloc(MAX_NUMBER_OF_STARS*sizeof(double));
 arr_CD2_2=malloc(MAX_NUMBER_OF_STARS*sizeof(double));
 
 arr_tst=malloc(100*MAX_NUMBER_OF_STARS*sizeof(double));
 arr_tst2=malloc(100*MAX_NUMBER_OF_STARS*sizeof(double));

 int i=0,j=0,k=0;//,arr=0;

 /* */
 double dd1,dd2,da1,da2,dx1,dx2,dy1,dy2;
 int odin,dva,ref;
 double dist, dist_sigma,dist_best,dist_sigma_best;
 double best_CD1_1,best_CD1_2,best_CD2_1,best_CD2_2,best_CRPIX1,best_CRVAL1,best_CRPIX2,best_CRVAL2;
 /* */
 
 
 if( argc==1 ){
  fprintf(stderr,"Usage: lib/match_eater image.fit\n");
  exit(1);
 }
 
 matchfile=fopen("match.txt","r");
 if( matchfile==NULL ){
  fprintf(stderr,"ERROR! Can't open file match.txt      :(\n");
  exit(1);
 }

 k=0;
 while( -1<fscanf(matchfile,"%lf %lf %lf %lf",&arr_X[k],&arr_Y[k],&arr_A[k],&arr_D[k]) ){
  k++;
 }

 CRPIX1=arr_X[0];
 CRPIX2=arr_Y[0];
 CRVAL1=arr_A[0];
 CRVAL2=arr_D[0]; 

//
dist_best=99999999;
for(ref=0;ref<k;ref++){
//if( fabs(arr_X[ref]-gsl_stats_mean(arr_X,1,k))<4*MIN_MATCH_DISTANCE_PIX && fabs(arr_Y[ref]-gsl_stats_mean(arr_Y,1,k))<4*MIN_MATCH_DISTANCE_PIX && CRPIX1>100 && CRPIX2>100 ){
 CRPIX1=arr_X[ref];
 CRPIX2=arr_Y[ref];
 CRVAL1=arr_A[ref];
 CRVAL2=arr_D[ref]; 
    

/*
 CD1_1=-0.00036;
 CD1_2=0;
 CD2_1=0;
 CD2_2=-0.00036;
*/
 
/*
 dx1=arr_X[2]-CRPIX1;
 dx2=arr_X[1]-CRPIX1;
 fprintf(stderr,"dx1=%lg dx2=%lg\n",dx1,dx2);
 
 dy1=arr_Y[2]-CRPIX2;
 dy2=arr_Y[1]-CRPIX2;
 fprintf(stderr,"dy1=%lg dy2=%lg\n",dy1,dy2);

 da1=(arr_A[2]-CRVAL1)*cos(arr_D[2]*M_PI/180); 
 da2=(arr_A[1]-CRVAL1)*cos(arr_D[1]*M_PI/180);
  
 fprintf(stderr,"da1=%lg da2=%lg\n",da1,da2);
 
 dd1=arr_D[2]-CRVAL2;
 dd2=arr_D[1]-CRVAL2;
 fprintf(stderr,"dd1=%lg dd2=%lg\n",dd1,dd2);
 
 CD2_1=(dy2*dd1-dy1*dd2)/(dx1*dy2-dy1*dx2);
 CD1_1=(dd1-CD2_1*dx1)/dy1;
 
 CD1_2=(dx2*da1-dx1*da2)/(dy1*dx2-dx1*dy2);
 CD2_2=(da1-CD1_2*dy1)/dx1; 
 
 fprintf(stderr,"CD1_1=%lg\nCD1_2=%lg\nCD2_1=%lg\nCD2_2=%lg\nCRVAL1=%lg\nCRVAL2=%lg\nCRPIX1=%lg\nCRPIX2=%lg\n",CD1_1,CD1_2,CD2_1,CD2_2,CRVAL1,CRVAL2,CRPIX1,CRPIX2);

*/

j=0;
for(odin=1;odin<k;odin++){
 for(dva=odin+1;dva<k;dva++){
 //if( odin!=ref && dva!=ref && fabs(arr_X[dva]-CRPIX1)>MIN_MATCH_DISTANCE_PIX && fabs(arr_X[odin]-CRPIX1)>MIN_MATCH_DISTANCE_PIX && fabs(arr_X[dva]-arr_X[odin])>MIN_MATCH_DISTANCE_PIX && fabs(arr_Y[dva]-CRPIX2)>MIN_MATCH_DISTANCE_PIX && fabs(arr_Y[odin]-CRPIX2)>MIN_MATCH_DISTANCE_PIX && fabs(arr_Y[dva]-arr_X[odin])>MIN_MATCH_DISTANCE_PIX ){
 if( odin!=ref && dva!=ref ){
// if( odin!=ref && dva!=ref && fabs(arr_X[dva]-CRPIX1)>MIN_MATCH_DISTANCE_PIX && fabs(arr_X[odin]-CRPIX1)>MIN_MATCH_DISTANCE_PIX  && fabs(arr_Y[dva]-CRPIX2)>MIN_MATCH_DISTANCE_PIX && fabs(arr_Y[odin]-CRPIX2)>MIN_MATCH_DISTANCE_PIX ){
// if( fabs(arr_X[dva]-CRPIX1)<MAX_MATCH_DISTANCE_PIX && fabs(arr_X[odin]-CRPIX1)<MAX_MATCH_DISTANCE_PIX  && fabs(arr_Y[dva]-CRPIX2)<MAX_MATCH_DISTANCE_PIX && fabs(arr_Y[odin]-CRPIX2)<MAX_MATCH_DISTANCE_PIX ){
 dx1=arr_X[dva]-CRPIX1;
 dx2=arr_X[odin]-CRPIX1;
// fprintf(stderr,"dx1=%lg dx2=%lg\n",dx1,dx2);
 
 dy1=arr_Y[dva]-CRPIX2;
 dy2=arr_Y[odin]-CRPIX2;
// fprintf(stderr,"dy1=%lg dy2=%lg\n",dy1,dy2);

 da1=(arr_A[dva]-CRVAL1)*cos(arr_D[2]*M_PI/180); 
 da2=(arr_A[odin]-CRVAL1)*cos(arr_D[1]*M_PI/180);
  
// fprintf(stderr,"da1=%lg da2=%lg\n",da1,da2);
 
 dd1=arr_D[dva]-CRVAL2;
 dd2=arr_D[odin]-CRVAL2;
// fprintf(stderr,"dd1=%lg dd2=%lg\n",dd1,dd2);
 
 arr_CD2_1[j]=(dy2*dd1-dy1*dd2)/(dx1*dy2-dy1*dx2);
 arr_CD1_1[j]=(dd1-arr_CD2_1[j]*dx1)/dy1;
 
 arr_CD1_2[j]=(dx2*da1-dx1*da2)/(dy1*dx2-dx1*dy2);
 arr_CD2_2[j]=(da1-arr_CD1_2[j]*dy1)/dx1; 



 
 //fprintf(stderr,"arr_CD1_1=%lg\narr_CD1_2=%lg\narr_CD2_1=%lg\narr_CD2_2=%lg\nCRVAL1=%lg\nCRVAL2=%lg\nCRPIX1=%lg\nCRPIX2=%lg\n",arr_CD1_1[j],arr_CD1_2[j],arr_CD2_1[j],arr_CD2_2[j],CRVAL1,CRVAL2,CRPIX1,CRPIX2);
 if( arr_CD1_1[j]!=0.0 )j++;
 }
 }
}
 gsl_sort(arr_CD1_1,1,j);
 gsl_sort(arr_CD1_2,1,j);
 gsl_sort(arr_CD2_1,1,j);
 gsl_sort(arr_CD2_2,1,j);
// j-=(int)(0.1*j);
 CD1_1=gsl_stats_median_from_sorted_data(arr_CD1_1,1,j);
 CD1_2=gsl_stats_median_from_sorted_data(arr_CD1_2,1,j);
 CD2_1=gsl_stats_median_from_sorted_data(arr_CD2_1,1,j);
 CD2_2=gsl_stats_median_from_sorted_data(arr_CD2_2,1,j);

 fprintf(stderr,"\n\nCD1_1=%lg\nCD1_2=%lg\nCD2_1=%lg\nCD2_2=%lg\nCRVAL1=%lg\nCRVAL2=%lg\nCRPIX1=%lg\nCRPIX2=%lg\n",CD1_1,CD1_2,CD2_1,CD2_2,CRVAL1,CRVAL2,CRPIX1,CRPIX2);

 for(i=0;i<k;i++){
  arr_tst[i]=fabs(CRVAL2+CD1_1*(arr_Y[i]-CRPIX2)+CD2_1*(arr_X[i]-CRPIX1)-arr_D[i]);
  arr_tst2[i]=fabs(CRVAL1+CD2_2*(arr_X[i]-CRPIX1)/cos(arr_D[i]*M_PI/180)+CD1_2*(arr_Y[i]-CRPIX2)-arr_A[i]);
  arr_tst[i]=sqrt(arr_tst[i]*arr_tst[i]+arr_tst2[i]*arr_tst2[i]);
 }
 gsl_sort(arr_tst,1,i);
// i-=(int)(0.1*i);
 dist=gsl_stats_median_from_sorted_data(arr_tst,1,i);
 dist_sigma=gsl_stats_sd(arr_tst,1,i);

 fprintf(stderr,"dist=%lf dist_sigma=%lf\n",dist*3600,dist_sigma*3600);

 if( dist<dist_best ){
  dist_best=dist;
  dist_sigma_best=dist_sigma;
  best_CD1_1=CD1_1;
  best_CD1_2=CD1_2;
  best_CD2_1=CD2_1;
  best_CD2_2=CD2_2;
  best_CRPIX1=CRPIX1;
  best_CRVAL1=CRVAL1;
  best_CRPIX2=CRPIX2;
  best_CRVAL2=CRVAL2;
 }

}
CD1_1=best_CD1_1;
CD1_2=best_CD1_2;
CD2_1=best_CD2_1;
CD2_2=best_CD2_2;
CRPIX1=best_CRPIX1;
CRVAL1=best_CRVAL1;
CRPIX2=best_CRPIX2;
CRVAL2=best_CRVAL2;

fprintf(stderr,"\n\nBest:\nCD1_1=%lg\nCD1_2=%lg\nCD2_1=%lg\nCD2_2=%lg\nCRVAL1=%lg\nCRVAL2=%lg\nCRPIX1=%lg\nCRPIX2=%lg\n",CD1_1,CD1_2,CD2_1,CD2_2,CRVAL1,CRVAL2,CRPIX1,CRPIX2);
fprintf(stderr,"dist=%lf dist_sigma=%lf\n",dist_best*3600,dist_sigma_best*3600);
//

 strcpy(update_key_comment," ");
 
 if( 0!=fitsfile_read_check(argv[1]) )exit(1);
 ffopen(&fptr, argv[1], READWRITE , &status);
 fits_report_error(stderr, status);  /* print out any error messages */
 if( status!=0 )exit(1);

 strcpy(update_key_name,"CTYPE1");
 strcpy(update_key_value,"RA---TAN");
 fits_update_key(fptr, TSTRING, update_key_name, update_key_value, update_key_comment, &status);
 
 strcpy(update_key_name,"CTYPE2");
 strcpy(update_key_value,"DEC--TAN");
 fits_update_key(fptr, TSTRING, update_key_name, update_key_value, update_key_comment, &status);
 
 strcpy(update_key_name,"CD1_1");
 fits_update_key(fptr, TDOUBLE, update_key_name, &CD1_1, update_key_comment, &status);
 
 strcpy(update_key_name,"CD1_2");
 fits_update_key(fptr, TDOUBLE, update_key_name, &CD1_2, update_key_comment, &status);
 
 strcpy(update_key_name,"CD2_2");
 fits_update_key(fptr, TDOUBLE, update_key_name, &CD2_2, update_key_comment, &status);
 
 strcpy(update_key_name,"CD2_1");
 fits_update_key(fptr, TDOUBLE, update_key_name, &CD2_1, update_key_comment, &status);
 
 strcpy(update_key_name,"CRPIX1");
 fits_update_key(fptr, TDOUBLE, update_key_name, &CRPIX1, update_key_comment, &status);
 
 strcpy(update_key_name,"CRPIX2");
 fits_update_key(fptr, TDOUBLE, update_key_name, &CRPIX2, update_key_comment, &status);
 
 strcpy(update_key_name,"CRVAL1");
 fits_update_key(fptr, TDOUBLE, update_key_name, &CRVAL1, update_key_comment, &status);
 
 strcpy(update_key_name,"CRVAL2");
 fits_update_key(fptr, TDOUBLE, update_key_name, &CRVAL2, update_key_comment, &status);
 
 strcpy(update_key_name,"LONPOLE");
 fits_update_key(fptr, TDOUBLE, update_key_name, &LONPOLE, update_key_comment, &status);

 strcpy(update_key_name,"LATPOLE");
 fits_update_key(fptr, TDOUBLE, update_key_name, &LATPOLE, update_key_comment, &status);

 strcpy(update_key_name,"EQUINOX");
 fits_update_key(fptr, TDOUBLE, update_key_name, &EQUINOX, update_key_comment, &status);
 
 strcpy(update_key_name,"EPOCH");
 fits_update_key(fptr, TDOUBLE, update_key_name, &EPOCH, update_key_comment, &status);

 ffclos(fptr,&status);
 fits_report_error(stderr, status);  /* print out any error messages */



 free(arr_X);
 free(arr_Y);
 free(arr_A);
 free(arr_D);
 free(arr_CD1_1);
 free(arr_CD1_2);
 free(arr_CD2_1);
 free(arr_CD2_2);

 
 return 0;
}
