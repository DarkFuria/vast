#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <math.h>

#include <gsl/gsl_statistics.h>
#include <gsl/gsl_sort.h>

#include "../fitsio.h"

#define MIN_REAL_COUNT 5 // The minimum count assumed to be real. The default is 5

//unsigned short detect_overscan(unsigned short *image_array, long *naxes){
unsigned short detect_overscan(float * image_array, long *naxes){
 int i,j;
 int binsize=15;
 double arr[1024];
 double median1=65535;
 double median2=0;
 double median;
 double sigma; // to detect if there are any overscan at all
 double sigma1=0.0;
 unsigned short min_real_count_estimate;
 for(i=naxes[0]*naxes[1]/2+0;i<naxes[0]*naxes[1]/2+naxes[0]-2*binsize;i++){
  for(j=i;j<i+binsize;j++){
   arr[j-i]=(double)image_array[j];
   //fprintf(stderr,"1 arr[%d]=(double)image_array[%d]=%lf\n",j-i,j,arr[j-i]);
  }
  gsl_sort(arr,1,binsize);
  median=gsl_stats_median_from_sorted_data(arr,1,binsize);
  if( median<median1 )median1=median;
  sigma=gsl_stats_sd(arr,1,binsize);
  if( sigma>sigma1 )sigma1=sigma;
  for(j=i+binsize;j<i+2*binsize;j++){
   arr[j-i-binsize]=(double)image_array[j];
   //fprintf(stderr,"2 arr[%d]=(double)image_array[%d]=%lf\n",j-i-binsize,j,arr[j-i-binsize]);
  }
  gsl_sort(arr,1,binsize);
  median=gsl_stats_median_from_sorted_data(arr,1,binsize);
  if( median>median2 )median2=median;   
//  fprintf(stdout,"%lf\n",median2/median1);  
//  fprintf(stdout,"%d\n",image_array[i]);
 }
 fprintf(stderr,"median1=%lf median2=%lf fabs(median2-median1)=%lf>%lf=5*sigma1\n",median1,median2,fabs(median2-median1),5*sigma1);
 //min_real_count_estimate=(unsigned short)(median1+(median2-median1)/5); 
 min_real_count_estimate=(unsigned short)median1+10*sqrt(median1);
 if( min_real_count_estimate<MIN_REAL_COUNT ){
  min_real_count_estimate=MIN_REAL_COUNT;
  return min_real_count_estimate;
 }
// if( fabs(median2-median1)>3*sigma1 ){
// if( fabs(median2-median1)<5*sigma1 ){
// sigma1 turns out to be a bad estimate of the background noise because of outliers
 if( fabs(median2-median1)<10*sqrt(median1) ){
  fprintf(stderr,"No overscan found!\n");
//  min_real_count_estimate=0;
  min_real_count_estimate=MIN_REAL_COUNT; /// ZATYCHKA!!!!!!!!!!!!!!!!11
  return min_real_count_estimate;
 }
 fprintf(stderr,"Overscan detected!\n");
 return min_real_count_estimate;
}

int main(int argc,char *argv[]){
 unsigned short min;
 /* Для чтения фитсов */
 fitsfile *fptr;       /* pointer to the FITS file; defined in fitsio.h */
 long  fpixel = 1;
 long naxes[2];
 long testX,testY;
   
 int status=0;
 int anynul=0;
 unsigned short nullval_ushort=0;
 float nullval_float=0.0;
 unsigned short *image_array;
 unsigned short *flat_array;
 float *float_flat_array;
 unsigned short *result_image_array;
 
 /* ----- */
 long i;
 int bitpix2;
 double tmp,norm; 
 /* -- Для хранения ключей из шапки -- */
 char *key[10000];
 int No_of_keys; 
 int keys_left;  
 long ii;

 double bzero=32768.0;


 if( argc<3 ){
  fprintf(stderr,"Not enough arguments... :(\n  Usage: ./md image.fit flat.fit result.fit\n");  
  exit(1);
 }
 fprintf(stderr,"MegaDivider v4\n");
  
 /* Читаем файл */
 fits_open_file(&fptr, argv[1], 0 , &status);
 fits_report_error(stderr, status);  /* print out any error messages */
 if( status != 0 ) exit(status);
 fits_read_key(fptr,TLONG,"NAXIS1",&naxes[0],NULL,&status);
 fits_report_error(stderr, status);  /* print out any error messages */
 if( status != 0 ) exit(status);
 fits_read_key(fptr,TLONG,"NAXIS2",&naxes[1],NULL,&status);
 fits_report_error(stderr, status);  /* print out any error messages */
 if( status != 0 ) exit(status);
 //Читаем из шапки то что стоит запомнить
 fits_get_hdrspace(fptr,&No_of_keys,&keys_left,&status);
 for(ii=1;ii<No_of_keys;ii++){
  key[ii]=malloc(FLEN_CARD*sizeof(char)); // FLEN_CARD length of a FITS header card defined in fitsio.h
  fits_read_record(fptr,ii,key[ii],&status);
 }
 fits_get_img_type(fptr, &bitpix2, &status);
 
 /* Выделяем память */
 image_array=malloc(naxes[0] * naxes[1] * sizeof(short));
 flat_array=malloc(naxes[0] * naxes[1] * sizeof(short));
 float_flat_array=malloc(naxes[0] * naxes[1] * sizeof(float));
 result_image_array=malloc(naxes[0] * naxes[1] * sizeof(short));
 /* И читаем картинку */
 fits_read_img(fptr, TUSHORT, 1, naxes[0]*naxes[1],&nullval_ushort,image_array, &anynul, &status);                 
 fprintf(stderr,"Reading image %s %ld %ld  %d bitpix\n",argv[1],naxes[0],naxes[1],bitpix2);      
 fits_close_file(fptr,&status);
 fits_report_error(stderr, status);  /* print out any error messages */
 status=0;

 /* Читаем дарк */
 fits_open_file(&fptr, argv[2], 0 , &status);
 fits_report_error(stderr, status);  /* print out any error messages */
 if( status != 0 ) exit(status);
 fits_read_key(fptr,TLONG,"NAXIS1",&testX,NULL,&status);
 fits_report_error(stderr, status);  /* print out any error messages */
 if( status != 0 ) exit(status);
 fits_read_key(fptr,TLONG,"NAXIS2",&testY,NULL,&status);
 fits_report_error(stderr, status);  /* print out any error messages */
 if( status != 0 ) exit(status); 
 if( testX != naxes[0] || testY != naxes[1]){
  fprintf(stderr,"Flat field and image must be the same size!\n");
  exit(1);
 }
 fits_get_img_type(fptr, &bitpix2, &status);
 fprintf(stderr,"Reading flat %s %ld %ld  %d bitpix\n",argv[2],testX,testY,bitpix2);
 // The following will handle only FLOAT and SHORT data types for the flat field file
 if( bitpix2 == FLOAT_IMG ){
  fits_read_img(fptr, TFLOAT, 1, naxes[0]*naxes[1],&nullval_float,float_flat_array, &anynul, &status);
 }
 else{
  fits_read_img(fptr, TUSHORT, 1, naxes[0]*naxes[1],&nullval_ushort,flat_array, &anynul, &status);
  for(i=0;i<naxes[0]*naxes[1];i++)
   float_flat_array[i]=(float)flat_array[i];
 }
 fits_close_file(fptr,&status);
 fits_report_error(stderr, status);  /* print out any error messages */      
 status=0;
 
 
 /* Считаем нормировочный коэффициент */
 norm=0.0;
 for(i=0;i<naxes[0]*naxes[1];i++){
  norm+=float_flat_array[i];
 }
 
 norm=norm/(naxes[0]*naxes[1]);
 fprintf(stderr,"Avarage count on flat field image: %lf\n",norm);
 
 // !!!
 min=detect_overscan(float_flat_array, naxes);
 //min=0;
 fprintf(stderr,"Minimal real count (from overscan): %d\n",min);
 
 /* Делим на плоское поле */
 for(i=0;i<naxes[0]*naxes[1];i++){
  //if( image_array[i] > min && float_flat_array[i] > min ){
  if( float_flat_array[i] > min ){
   tmp=(double)(image_array[i])/((double)(float_flat_array[i])+0.0000001)*norm;
  }
  else{
   tmp=0.0;
  }
  // never happens...
  //fprintf(stderr,"tmp=%lf\n",tmp);
  if( tmp>65534.0 ){
   //fprintf(stderr,"Numeric overflow at a saturated pixel! %lf\n",tmp);
   tmp=65534.5; // so we get 65535 after rounding-up
  }
  result_image_array[i]=(unsigned short)(tmp+0.5);
 }
 free(image_array);
 free(flat_array);
 free(float_flat_array);   
 fits_create_file(&fptr, argv[3], &status);   /* create new file */
 fits_report_error(stderr, status);  /* print out any error messages */
 if( status!=0 ) exit(1);
 fits_create_img(fptr, USHORT_IMG, 2, naxes, &status);
 fits_report_error(stderr, status);  /* print out any error messages */
 if( status!=0 ){fprintf(stderr,"Can't create image\n"); exit(1);}
 fits_write_img(fptr, TUSHORT, fpixel, naxes[0]*naxes[1], result_image_array, &status);
 fits_report_error(stderr, status);  /* print out any error messages */
 if( status!=0 ){fprintf(stderr,"Can't write image\n"); exit(1);}
 /* -- Пишем шапку -- */
 for(ii=1;ii<No_of_keys;ii++){
  fits_write_record(fptr,key[ii],&status);
 }
 fits_delete_key(fptr,"SIMPLE",&status);
 fits_delete_key(fptr,"BITPIX",&status);
 fits_delete_key(fptr,"NAXIS",&status); 
 fits_delete_key(fptr,"NAXIS1",&status);
 fits_delete_key(fptr,"NAXIS2",&status);
 fits_delete_key(fptr,"EXTEND",&status);
 fits_delete_key(fptr,"COMMENT",&status);
 fits_delete_key(fptr,"COMMENT",&status);
 fits_delete_key(fptr,"BZERO",&status);
// fits_write_key(fptr,TDOUBLE,"BZERO",&bzero," ",&status);
 fits_delete_key(fptr,"BSCALE",&status); 
 fits_write_history(fptr, argv[1],  &status);
 fits_write_history(fptr, argv[2],  &status);
 fits_report_error(stderr, status);  /* print out any error messages */
 fits_close_file(fptr, &status);
 free(result_image_array);
 
 fits_open_file(&fptr, argv[3], READWRITE , &status);
 fits_update_key(fptr,TDOUBLE,"BZERO",&bzero," ",&status);
 fits_close_file(fptr, &status);
 
 fprintf(stderr,"Output is written to %s :)\n\n",argv[3]);
 
 for(ii=1;ii<No_of_keys;ii++){
  free(key[ii]);
 }
 
 return 0;
}
