.TH sk 3
.SH NAME
sk  (done)
P Client/Server
                    (Rev. 03-May-1996)
.NXB "sockets" "client" "server" "RPC"
.SH SYNTAX
.LP
.TP 4
.B =>
\fBServer startup\fR: 
.br
int \fIsock\fR = \fIsk_start\fR(char \fI*\fR\fIservice\fR, char \fI*\fR
\fImode\fR); 
.br
int \fIsock\fR = \fIsk_astart\fR(char \fI*\fR\fIservice\fR, char \fI*\fR
\fImode\fR, char \fI*\fR\fIauthorisation_file\fR); 
.br
int \fIplug\fR = \fIsk_accept\fR(int \fIsock\fR, int \fIqueue_slots\fR); 
.br
int \fIstatus\fR = \fIsk_ack\fR(int \fIplug\fR); 
.br
char \fI*\fR\fIcaller\fR = \fIsk_caller\fR(int \fIplug\fR);
.br
\fIsk_urgent\fR(int \fIplug\fR); 
.TP 4
.B =>
\fBClient Connection\fR: 
.br
int \fIplug\fR = \fIsk_open\fR(char \fI*\fR\fIhost\fR, char \fI*\fR\fI
service\fR); 
.br
int \fIplug\fR = \fIsk_connect\fR(char \fI*\fR\fIhost\fR, char \fI*\fR\fI
service\fR, char \fI*\fR\fIusername\fR, char \fI*\fR\fIpassword\fR); 
.br
int \fIstat\fR = \fIsk_close\fR(int \fIplug\fR); 
.TP 4
.B =>
\fBClient/Server Dialogue\fR:
.br
int \fIbytes\fR = \fIsk_read\fR(int \fIplug\fR, char \fI*\fR\fIbuf\fR, 
int \fIlen\fR); 
.br
int \fIbytes\fR = \fIsk_get\fR(int \fIplug\fR, char \fI*\fR\fIbuf\fR, 
int \fIlen\fR); 
.br
int \fIbytes\fR = \fIsk_gets\fR(int \fIplug\fR, char \fI*\fR\fIbuf\fR, 
int \fIlen\fR); 
.br
long \fIvalue\fR = \fIsk_getl\fR(int \fIplug\fR); 
.br
int \fIbytes\fR = \fIsk_write\fR(int \fIplug\fR, char \fI*\fR\fIbuf\fR, 
int \fIlen\fR); 
.br
int \fIbytes\fR = \fIsk_put\fR(int \fIplug\fR, char \fI*\fR\fIbuf\fR); 
.br
int \fIbytes\fR = \fIsk_puts\fR(int \fIplug\fR, char \fI*\fR\fIbuf\fR); 
.br
int \fIstatus\fR = \fIsk_putl\fR(int \fIplug\fR, long \fIvalue\fR); 
.TP 4
.B =>
\fBData Exchange on Server Side\fR
.br
int \fIbytes\fR = \fIsk_toclient\fR(int \fIplug\fR, int \fIfile_to_send
\fR); 
.br
int \fIbytes\fR = \fIsk_fromclient\fR(int \fIplug\fR, int \fI
file_to_receive\fR); 
.br
int \fIstatus\fR = \fIsk_errsend\fR(int \fIplug\fR, char \fI*\fR\fI
message\fR); 
.br
int \fIstatus\fR = \fIsk_perrsend\fR(int \fIplug\fR, char \fI*\fR\fI
message\fR); 
.TP 4
.B =>
\fBData Exchange on Client Side\fR
.br
int \fIbytes\fR = \fIsk_obeyserver\fR(int \fIplug\fR, int (\fI*\fR\fI
digest_routine\fR)(), int (\fI*\fR\fImore_routine\fR)()); 
.br
int \fIbytes\fR = \fIsk_fromserver\fR(int \fIplug\fR, int \fI
file_to_receive\fR, \fIfile_to_send\fR); 
.br
char \fI*\fR\fImessage\fR = \fIsk_error\fR();
.br
\fIsk_kill\fR(int \fIplug\fR, int \fIsigno\fR); 
.TP 4
.B =>
\fBLogging & Debugging\fR: 
.br
FILE \fI*\fR\fIold_logfile\fR = \fIsk_setlog\fR(FILE \fI*\fR\fIlogfile\fR);
.br
FILE \fI*\fR\fIold_debfile\fR = \fIsk_iolog\fR(FILE \fI*\fR\fIdebfile\fR); 
.br
int \fIlev\fR = \fIsk_log\fR(int \fIlevel\fR, char \fI*\fR\fIformat\fR, ...
); 
.TP 4
.B =>
\fBServer Utilities\fR: 
.br
int \fIstatus\fR = \fIsk_umatch\fR(char \fI*\fR\fIremote_id\fR, char \fI*
\fR\fItemplate\fR); 
.br
.TP 4
.B =>
Socket Configuration: 
.br
int \fIbytes\fR = \fIsk_setb\fR(int \fIsocket_size\fR) 
.PP
.SH DESCRIPTION
This set of functions, stored in the libraries
.PP
.LP
\fI/usr/local/lib/libsk.a\fR for the client routines, and in
.PP
.LP
\fI/usr/local/lib/libskserv.a\fR (server routines),
.PP
.LP
allow to build client/server dialogues using socket(2) facilities in 
\fIstream\fR mode. A client connected to Internet may reach a server 
connected to Internet independently of the machine architectures. The 
client/server model is a way of RPC (Remote Process Call) 
implementation.
.PP
The \fIservice\fR is a character string representing either a number 
in the range 1024-2047 or a symbolic service name appearing in the 
file \fI/etc/services\fR(5); it pertains to which kind of service we 
want to connect to.
.PP
.SH "INCLUDE FILES"
Function declarations are gathered in the two files: 
.LP
.TP 4
.B =>
\fI/usr/local/include/sk.h\fR for client routines 
.TP 4
.B =>
\fI/usr/local/include/skserv.h\fR for server routines 
.PP
.SH "SERVER STARTUP"
The server can be launched, either as a \fIdaemon\fR by \fIinetd\fR
(8), or as a standalone program in \fIbackground\fR mode. The choice 
between these two modes is made via the the \fImode\fR argument of 
the \fIsk_start\fR routine: when it contains the character \fId\fR, 
the server is started via \fIinetd\fR(8), which requires a specific 
line in the \fI/etc/inetd.conf\fR(5) file. The possible characters in 
the \fImode\fR argument are: 
.LP
.TP 4
.B =>
\fBd\fR   to start in \fIdaemon\fR mode 
.TP 4
.B =>
\fBl\fR   to log the server events in the \fIsyslog\fR(8) 
.TP 4
.B =>
\fBv\fR   to add debugging messages in the log 
.TP 4
.B =>
\fBvv\fR (two \fBv\fR's)   for very verbose (debugging) log. 
.PP
\fIsk_start\fR returns \fB-1\fR in case of failure, and prints an 
error message in the log; otherwise \fIsk_start\fR returns a 
non-negative socket number.
.PP
\fIsk_astart\fR is a version which uses an \fIauthorisation file\fR 
which can be the \fI/etc/passwd\fR(5) file, or a file similar to it:
the client has to provide a username and a password for 
identification. This client normally uses the \fIsk_connect\fR routine 
to identify himself. The \fIauthorisation_file\fR parameter may be 
.LP
.TP 4
.B =>
\fINULL\fR (i.e. (char *)0); in this case no user authentification is
performed 
.TP 4
.B =>
\fIvoid string\fR (i.e. \fI""\fR); in this case the standard \fI
/etc/passwd\fR file is used; 
.TP 4
.B =>
a valid file name which is then used instead of the \fI/etc/passwd
\fR file. 
See below the description of the \fIauthorisation file\fR,
.PP
Once launched, the server will normally listen to the created socket,
waiting for a client connection. The \fIsk_accept\fR routine provides 
this functionnality, i.e. a successful return from \fIsk_accept\fR 
means that a client asked for a dialogue with the server. The \fI
queue_slots\fR argument specifies the size of the queue of clients 
waiting for a connection with the server: when the queue is full, 
the unsuccessful client will get an error message.
.PP
After a successful \fIsk_accept\fR, the server has to identify 
himself, and ask for client's identification. This is achieved with 
the \fIsk_ack\fR function.
.PP
In a daemon mode, the function \fIsk_accept\fR is called by the 
parent process, which forks ; the \fIsk_ack\fR function is normally 
called by the \fIchild\fR process, while the parent process waits for
another connection. See the example in the Example section below.
.PP
Once a client has started a dialogue with the server (via \fI
sk_accept\fR and \fIsk_ack\fR), the client's name and address can then
be retrieved with \fIsk_caller\fR. The syntax of the character string 
returned by \fIsk_caller\fR is
.PP
.ce 1
\fIRemote_Username[\fB!\fI]\fI@InterNet_Number\fI(Host_Name\fI):
Provided_Username\fR
.PP
where the \fB!\fR indicates a user with \fIroot\fR privileges.
.PP
A NULL string (\fI(char *)0\fR) is returned by \fIsk_caller\fR in 
case of a bad \fIplug\fR number or in case of error.
.PP
The \fIsk_urgent\fR routine allows the server to receive signals sent 
by the connected client; see below the \fISignal Communication\fR 
section.
.PP
.SH "CLIENT CONNECTION"
A program can start a dialogue with a server using the \fIsk_open\fR
(no identification) or the \fIsk_connect\fR function. \fIservice\fR, as 
for the server, is either a numeric string representing a number in 
the range 1024-2047, or is a name normally existing in the \fI
/etc/services\fR file. The \fIusername\fR and \fIpassword\fR provided by
\fIsk_connect\fR, as well as the client's node and username, are 
checked against what is known in the \fIauthorisation_file\fR (see 
below)
.PP
A failure to reach the server specified by its \fIhostname\fR and 
its \fIservice\fR name or number returns a \fInegative value\fR, and 
an error message is printed or logged (see the \fIsk_setlog\fR 
function); otherwise \fIsk_open\fR or \fIsk_connect\fR return a 
non-negative number to be used as the first argument of dialogue 
routines.
.PP
In case of failure, the returned codes mean the following: 
.LP
.TP 4
.B =>
\fB-1\fR: the connection to the Server can't be established due to 
network problems, like unknown host or service; 
.TP 4
.B =>
\fB-2\fR: the Server has been reached, but refused to pursue for 
invalid username/password or unauthorized machine. 
.PP
.SH "CLIENT/SERVER DIALOGUE"
When the connection between the client and the server is established,
both can read or write on the socket. Which of the client or 
server has to read or write on the socket is defined only by the 
calling programs; the dialogue has therefore to be carefully designed 
to avoid endless waits on an opened socket. Other functions described
in the next section use a very simple \fIprotocol\fR for exchange of
data.
.PP
Four functions are provided available for reading on the socket, and 
four other are provided for writing on the socket. All these 8 
functions return \fB-1\fR in case of error.
.PP
.PP
.LP
.TP 4
.B 1.
int \fIbytes\fR = \fIsk_read\fR(int \fIplug\fR, char \fI*\fR\fIbuf\fR, 
int \fIlen\fR) 
.br
is the simplest reading interface, and reads up to \fIlen\fR bytes. 
The returned number of bytes is generally smaller than \fIlen\fR: no 
attempt is made to fill \fIbuf\fR. 
.TP 4
.B 2.
int \fIbytes\fR = \fIsk_get\fR(int \fIplug\fR, char \fI*\fR\fIbuf\fR, 
int \fIlen\fR) 
.br
fills \fIbuf\fR from what comes on the socket. The returned number 
of bytes is therefore identical to \fIlen\fR, unless an error occured
or the partner closed the connection. 
.TP 4
.B 3.
int \fIbytes\fR = \fIsk_gets\fR(int \fIplug\fR, char \fI*\fR\fIbuf\fR, 
int \fIlen\fR) 
.br
fills \fIbuf\fR up to \fIlen\fR bytes, or until a \fInewline\fR is 
found. The returned length includes the newline. Notice however that 
\fIbuf\fR is \fBnot\fR terminated by the \fINULL\fR character. 
.TP 4
.B 4.
long \fIvalue\fR = \fIsk_getl\fR(int \fIplug\fR) 
.br
reads a \fIlong integer\fR (4-byte integer) on the socket (normally 
issued by the partner using \fIsk_putl\fR). Byte swapping is performed
if the local machine architecture differs from the network one.
.br
.TP 4
.B 5.
int \fIbytes\fR = \fIsk_write\fR(int \fIplug\fR, char \fI*\fR\fIbuf\fR, 
int \fIlen\fR) 
.br
writes \fIlen\fR bytes onto the socket. Its returned number of bytes 
is identical to \fIlen\fR, unless an error occured or the partner 
closed the connection. 
.TP 4
.B 6.
int \fIbytes\fR = \fIsk_put\fR(int \fIplug\fR, char \fI*\fR\fIbuf\fR) 
.br
writes a null-terminated string on the socket. 
.TP 4
.B 7.
int \fIbytes\fR = \fIsk_puts\fR(int \fIplug\fR, char \fI*\fR\fIbuf\fR) 
.br
writes a null-terminated string as a line on the socket, i.e. a 
newline is appended to the string before being sent to the partner. 
.TP 4
.B 8.
int \fIstatus\fR = \fIsk_putl\fR(int \fIplug\fR, long \fIvalue\fR) 
.br
sends a 4-byte \fIlong integer\fR to the partner; byte swapping is 
performed if necessary. 
.PP
Note that \fIplug\fR is a file handle, and it is therefore possible 
to use standard i/o routines after the association of a \fIFILE\fR 
structure generated by the \fBfdopen\fR(2) routine.
.PP
.SH "DATA EXCHANGE ON SERVER SIDE"
Four control characters are used for the data exchange functions. 
When the server sends to the client the character: 
.LP
.TP 4
.B =>
\fB D\fR . It means: 
.br
\fI``I've finished to talk. It's now up to you''\fR 
.TP 4
.B =>
\fB B\fR . It means: 
.br
\fI``I'll send \fRCounted Buffers\fI, i.e. data prefixed with its 
length expressed as a 4-byte integer. I'll continue to send \fR
Counted Buffers\fI until the prefix specifies a zero length''\fR. This
convention is used by \fIsk_toclient\fR. 
.TP 4
.B =>
\fB C\fR . It means: 
.br
\fI``I'll send a \fRsingle counted buffer\fI, i.e. data prefixed with 
its 4-byte length. \fR It contains normally an \fIerror message\fR. 
.TP 4
.B =>
\fB F\fR . It means: 
.br
\fI``Please send me a \fRCounted Buffer\fI''\fR. This convention is 
used by \fIsk_fromclient\fR. 
.PP
The detailed functionnalities are: 
.LP
.TP 4
.B =>
int \fIbytes\fR = \fIsk_toclient\fR(int \fIplug\fR, int \fIfile_to_send
\fR) 
.br
is used by the Server to send a file to the connected client, 
using the \fB B\fR convention: 
.LP
.RS
.TP 4
.B 1.
Server sends \fB B\fR 
.TP 4
.B 2.
Client acknowledges with \fB F\fR 
.TP 4
.B 3.
Server sends counted buffers (buffers preceded by their 4-byte 
length). The last counted buffer has a length of zero. 
.RE
.LP
Upon return from \fIsk_toclient\fR, the Server has still to send a 
\fB D\fR to the client to tell him that it's up to him to talk. 
.br
\fIfile_to_send\fR must have been opened in \fIread\fR mode by \fIopen
\fR(2). 
.TP 4
.B =>
int \fIbytes\fR = \fIsk_fromclient\fR(int \fIplug\fR, int \fI
file_to_receive\fR) 
.br
is used by the Server to get a data set from the connected client,
using the \fB F\fR convention: 
.LP
.RS
.TP 4
.B 1.
Server sends \fB F\fR 
.TP 4
.B 2.
Client returns a counted buffer (4-byte integer expressing the buffer 
length, followed by the actual buffer) 
.TP 4
.B 3.
Server asks for the next buffer with \fB F\fR if the length of the
received counted buffer is not zero. 
.RE
.LP
\fIsk_fromclient\fR stops just after the client sent a zero length 
data buffer; Upon return from \fIsk_fromclient\fR, the Server has 
still to send a \fB D\fR to the client to tell him that it's up 
to him to talk.
.br
\fIfile_to_receive\fR must have been opened in \fIwrite\fR mode by \fI
open\fR(2). 
.TP 4
.B =>
int \fIstatus\fR = \fIsk_errsend\fR(int \fIplug\fR, char \fI*\fR\fI
message\fR) 
.br
allows to send a single counted buffer to the client, which 
generally represents an \fIerror message\fR. If the client uses the 
\fIsk_obeyserver\fR or the \fIsk_fromserver\fR routine, the server has 
to send a \fB D\fR to the client to tell him to return from the 
\fIsk_obeyserver\fR function. 
.TP 4
.B =>
int \fIstatus\fR = \fIsk_perrsend\fR(int \fIplug\fR, char \fI*\fR\fI
message\fR)
.br
is similar to \fIsk_errsend\fR, but \fImessage\fR is followed by the 
system error message as in \fBperror\fR(2). 
.PP
.SH "DATA EXCHANGE ON CLIENT SIDE"
.LP
.TP 4
.B =>
int \fIbytes\fR = \fIsk_fromserver\fR(int \fIplug\fR, int \fI
file_to_receive\fR, \fIfile_to_send\fR) 
.br
is used by the Client to follow the above conventions: it reads 
what comes over the \fIplug\fR socket and writes it onto \fI
file_to_receive\fR which must have been opened in \fIwrite\fR mode by 
\fIopen\fR(2); when the Server asks to send a \fICounted Buffer\fR, 
it reads it from \fIfile_to_send\fR.
.br
The return from \fIsk_fromserver\fR therfore occurs 
.LP
.RS
.TP 4
.B =>
either when the server sends a \fB D\fR in non-buffered mode; 
.TP 4
.B =>
or when an error occurs. 
.RE
.LP
.TP 4
.B =>
int \fIbytes\fR = \fIsk_obeyserver\fR(int \fIplug\fR, int (\fI*\fR\fI
digest_routine\fR)(), int (\fI*\fR\fImore_routine\fR)()) 
.br
is similar to \fIsk_fromserver\fR, but routines are used instead of 
files: 
.LP
.RS
.TP 4
.B =>
\fIdigest_routine\fR(char \fI*\fR\fIbuf\fR, int \fIlength\fR) collects 
what's sent by the Server 
.TP 4
.B =>
\fImore_routine\fR(char \fI*\fR\fIbuf\fR, int \fIlength\fR) is called 
when the Server asks for more data. 
.RE
.LP
Both \fIdigest\fR and \fImore\fR routines must return the number of 
bytes processed, \fB0\fR for end-of-file, and \fB-1\fR for error . As
for \fIsk_fromserver\fR, the client has normally to send something to 
the Server, since he got the \fB D\fR telling he has to talk. 
.TP 4
.B =>
char \fI*\fR\fImessage\fR = \fIsk_error\fR()
.br
returns the last encountered error message. This function is normally 
to use when one of the \fIsk\fR routines returns \fB-1\fR.
.br
Note that \fIerrors are also written to \fBstderr\fI\fR by default; 
another file - or no file at all - may be chosen as a logfile. 
.PP
The \fIsk_kill\fR routine allows the client to send signals to the 
sever; see below the \fISignal Communication\fR section.
.PP
.SH "LOGGING & DEBUGGING"
The server normally logs the occuring events, either to a log file 
(which can be the \fIstdout\fR terminal), or in the system log. The 
usage of the \fIsyslog\fR facility (in file \fI/var/log/syslog\fR) is 
recommended when the server is launched in \fIdaemon\fR mode by 
inetd(8).
.PP
At any time, the server can log details in the \fIsyslog\fR with 
the \fIsk_log\fR function, which will direct the message to the 
currently opened logfile or to the syslog.
.PP
The first argument of the \fIsk_log\fR(int \fIlevel\fR, char \fI*\fR\fI
format\fR, ...) function is a number defined in the \fIsyslog.h\fR 
file, or \fB-1\fR to close the log file; this \fIlevel\fR argument 
is returned in case of success. The other arguments of the \fIsk_log
\fR are similar to those of the \fIprintf\fR(3) function.
.PP
The \fIsk_setlog\fR function allows to switch the log file at any 
time, and returns the previously active logfile. Notice that the \fI
syslog\fR is indicated by a NULL value: to use the syslog as a log
file, use the call
.PP
\fIold_logfile\fR = \fIsk_setlog((FILE *)0))\fR
.PP
A very verbose debugging is activated with the \fIsk_iolog\fR 
function: whatever is read or written on the socket is printed on 
the supplied log file. As \fIsk_setlog\fR, \fIsk_iolog\fR returns the 
old logfile. A \fINULL\fR \fIlogfile\fR argument asks to stop this 
debugging feature.
.PP
.SH "SIGNAL COMMUNICATION"
The client can send a signal to the server via the \fIsk_kill\fR(int
\fIplug\fR, int \fIsigno\fR) routine; \fIsigno\fR must be a valid 
signal (see \fBsignal\fR(3)). However, the signals can be received by 
the server only after the server has specified that he would accept 
signal interruptions. The acceptance of signal interrupts is specified 
once with the call to \fIsk_urgent\fR(int \fIplug\fR).
.PP
.SH "SERVER UTILITIES"
char \fI*\fR\fIsk_caller\fR(\fIplug\fR)   allows to retrieve a client 
identification; it is described above.
.PP
int \fIsk_umatch\fR(char \fI*\fR\fIremote_id\fR, char \fI*\fR\fItemplate\fR
)   is a routine which returns \fB0\fR if \fIremote_identification\fR 
as returned by \fIsk_caller\fR does not match the \fBtemplate\fR of 
authorized \fIRemote_Username\fR\fI@\fR\fIInternet\fR separated by commas; 
the wild chars \fI*\fR and \fI?\fR can be used in this field. 
Remember also the ending \fB!\fR in the username which indicates root
privileges. Some examples of \fItemplate\fR: 
.LP
.TP 4
.B =>
\fIroot!@130.79.*.*\fR   matches the \fIroot\fR user from any of the 
machines which Internet number starts with 130.79 
.TP 4
.B =>
\fI*@130.79.128.5,root!@130.79.*.*\fR   matches anybody having an account 
on the 130.79.128.5 machine, or the \fIroot\fR user on other machines
with Internet number starting with 130.79 
.PP
.SH "AUTHORISATION FILE"
An \fIAuthorisation File\fR can be used to restrict access to 
authorized users via a \fIUsername\fR and a \fIPassword\fR. The \fI
Authorisation File\fR can be identical to the \fI/etc/passwd\fR(5) file
when the third parameter of the \fIsk_start\fR routine is a blank 
string \fI""\fR
.PP
The three fields which are used are: 
.LP
.TP 4
.B 1.
the Username the client has to provide (default is \fIguest\fR) 
.TP 4
.B 2.
the Password (encrypted) 
.TP 4
.B 3.
the 5th field (also called \fIgecos\fR which may contain a list of 
allowed \fIRemote_Username\fI@Internet_Number\fR, templates separated by 
commas or blanks; the wild chars \fI*\fR and \fI?\fR can be used in
this field 
.PP
The password in the \fI/etc/passwd\fR file can be modified with the 
\fIpasswd\fR(1) utility, as well as the \fIgecos\fR field with the 
\fB-f\fR option. An alternative to the \fIpasswd -f\fR is the \fIchfn
\fR(1) utility.
.PP
.SH "SOCKET CONFIGURATION"
The size of blocks transferred onto the network can be changed with 
the \fIsk_setb\fR function. The standard size is generally 8 blocks 
(4K). \fIsk_setb\fR returns the current configuration.
.PP
A negative or null value of \fIsocket_size\fR does not modify the 
size of socket blocks; \fIsk_setb(0)\fR can therefore be used to know
the current socket size.
.PP
.SH "EXAMPLE OF A SERVER"
The following shows the basic writing of a server which creates a 
child via \fBfork\fR(2) who has to deal with the client. The server 
is assumed to receive the name of a file and to send its contents 
to the Client.
.PP

.br
#include <skserv.h>
.br
#include <signal.h>
.br
#include <sys/wait.h>
.br

.br
void on_death()         /* Read Zombie status */
.br
{ while(wait3(NULL, WNOHANG, NULL) > 0) ; }
.br

.br
static int theplug;
.br
void on_intr()          /* When the Serveur in Interrupted by the Client */
.br
{  sk_puts(theplug, "Bye-Bye"); exit(1); }
.br

.br
        /* A routine to send a file to the Client */
.br
display_file(plug, filename) int plug; char *filename; 
.br
{ int file;
.br
    file = open(filename, 0);
.br
    if (file < 0) perrsend(filename); 
.br
    else {
.br
        sk_toclient(plug, file);
.br
        close(file);
.br
    }
.br
}
.br

.br
main()
.br
{
.br
  int sock, plug;
.br
  char buffer[133];
.br

.br
    sock = sk_start("service", "v");    /* Verbose option */
.br
    if (sock < 0) exit(1);
.br
    signal(SIGCHLD, on_death);                  /* Handler for Zombies  */
.br

.br
    while(1) {                          /* Loop on incoming connections */
.br
        plug = sk_accept(sock, 1);
.br
        if (plug < 0) exit(1);  
.br
        if (fork()) {   /* Father Here. He doesn't need plug */
.br
            close(plug);
.br
            continue;   
.br
        }
.br

.br
        /* ===Child Here. sock is only for new connections; 
.br
              therefore close it */
.br
        close(sock);
.br
	sk_ack(plug);		/* Acknowledge the Client	*/
.br
        sk_log("%s just called\\n", sk_caller(plug));
.br

.br
        sk_urgent(plug);        /* Allow client to send Signal 	*/
.br
        signal(SIGINT, on_intr);
.br
        theplug = plug;         /* To communicate with on_intr 	*/
.br
        sk_gets(plug, buffer, sizeof(buffer));          /* Get question */
.br
        display_file(plug, buffer);
.br
        sk_put(plug, "\\04");    /* Tell the Client: I've finished to talk */
.br
        exit(0);
.br
    }
.br
}
.br

.PP
The corresponding client can be \fBaclient\fR(1), or the following 
code if the program is assumed to have three parameters which are 
the \fIhost\fR, the \fIservice\fR, and the \fIfilename\fR to list. 
.br
main(argc, argv) int argc; char *argv[];
.br
{
.br
  int plug;
.br

.br
    plug = sk_open(argv[1], argv[2]);
.br
    if (plug < 0 ) { perror(argv[1]); exit(1); }
.br
    if (sk_puts(plug, argv[3]) < 0) exit(1);
.br
    sk_obeyserver(plug, 1, 0);  /* Digest = file#1 (stdout) */
.br
}
.br

.PP
.SH "SEE ALSO"
aclient(1) aserver(1) chfn(1) socket(2) open(2) fdopen(2) fork(2) 
perror(2) printf(3) passwd(1) passwd(5) services(5) inetd(8) signal(3) 
syslog(8) wait3(2)
.PP
.SH "QUESTIONS & PROBLEMES"
a Fox (francois@simbad.u-strasbg.fr) 
