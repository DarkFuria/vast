#!/usr/bin/env bash

if [ -z "$VAST_PATH" ];then
 VAST_PATH=`readlink -f $0`
 VAST_PATH=`dirname "$VAST_PATH"`
 VAST_PATH="${VAST_PATH/util/}"
 VAST_PATH="${VAST_PATH/lib/}"
 VAST_PATH="${VAST_PATH/'//'/'/'}"
 # In case the above line didn't work
 VAST_PATH=`echo "$VAST_PATH" | sed "s:/'/:/:g"`
fi
# Check that VAST_PATH ends with '/'
LAST_CHAR_OF_VAST_PATH="${VAST_PATH: -1}"
if [ "$LAST_CHAR_OF_VAST_PATH" != "/" ];then
 VAST_PATH="$VAST_PATH/"
fi
#


#VIZIER_SITE=vizier.cfa.harvard.edu
#VIZIER_SITE=vizier.u-strasbg.fr
VIZIER_SITE=`"$VAST_PATH"lib/choose_vizier_mirror.sh`
#
echo -e "Starting $0" >> /dev/stderr

### Set path to wwwget in lib/bin/
#PATH_TO_THIS_SCRIPT=`readlink -f $0`
#PATH_TO_UTIL_DIR=`dirname $PATH_TO_THIS_SCRIPT`
#PATH_TO_VAST_DIR=`dirname $PATH_TO_UTIL_DIR`
#export PATH="$PATH:$PATH_TO_VAST_DIR/lib/bin/"
echo "$PATH" | grep --quiet "$VAST_PATH"lib/bin
if [ $? -ne 0 ];then
 export PATH="$VAST_PATH"lib/bin":$PATH"
fi


# Test the command line arguments
if [ -z $2 ];then
 echo " "
 echo "ERROR: search coordinates are not given! :(

Usage: $0 RA DEC [STAR_NAME] [FOV_arcmin]

Example: $0 18:38:06.47677 +39:40:05.9835

"
 exit 1
fi   
RA=$1
DEC=$2

# Check if the input coordinates are good
if "$VAST_PATH"lib/hms2deg "$RA" "$DEC" &>/dev/null || "$VAST_PATH"lib/deg2hms "$RA" "$DEC" &>/dev/null ;then echo YES ;fi | grep --quiet 'YES'
if [ $? -ne 0 ];then
 echo "ERROR parding the input coordinates!"
 exit 1
fi


if [ -z $3 ];then
 echo "The object name is not specified on the command line, using the default one"
 STAR_NAME="object"
else
 STAR_NAME=$3
fi

if [ -z $4 ];then
 echo "The field of view is not specified on the command line, using the default one"
 FOV=1.0
else
 FOV=$4
fi

TIMEOUTCOMMAND=`"$VAST_PATH"lib/find_timeout_command.sh`
if [ $? -ne 0 ];then
 echo "WARNING: cannot find timeout command"
else
 TIMEOUTCOMMAND="$TIMEOUTCOMMAND 300 "
fi

R_SEARCH_ARCSEC=2.5
echo "Searching 2MASS $R_SEARCH_ARCSEC\" around $RA $DEC"
$TIMEOUTCOMMAND "$VAST_PATH"lib/vizquery -site=$VIZIER_SITE -mime=text -source=2MASS  -out.max=1 -out.add=_r -out.form=mini  -sort=_r  -c="$RA $DEC" -c.rs=$R_SEARCH_ARCSEC -out=Jmag,e_Jmag,Kmag,e_Kmag  2>/dev/null |grep -v \# | grep -v "_" | grep -v "\-\-\-" |grep -v "sec"  | while read R J eJ K eK REST ;do
 if [ ! -z "$R" ];then
  if [ -z "$J" ];then
   continue
  fi
  if [ -z "$K" ];then
   continue
  fi
  # Compute J-K
  J_K=`echo "($J)-($K)" | bc -ql | awk '{printf "%.3f",$1}'`
  eJ_K=`echo "sqrt($eJ*$eJ+$eK*$eK)" | bc -ql | awk '{printf "%.3f",$1}'`
  if [ ! -z $J_K ];then
   # Guess spectral type *assuming zero extinction*
   # Based on http://adsabs.harvard.edu/abs/1988PASP..100.1134B
   SECTRAL_TYPE="B"
   TEST=`echo "$J_K > 0.0"|bc -ql`
   if [ $TEST -eq 1 ];then
    SECTRAL_TYPE="A"
   fi
   TEST=`echo "$J_K > 0.16"|bc -ql`
   if [ $TEST -eq 1 ];then
    SECTRAL_TYPE="F"
   fi
   TEST=`echo "$J_K > 0.36"|bc -ql`
   if [ $TEST -eq 1 ];then
    SECTRAL_TYPE="G"
   fi
   TEST=`echo "$J_K > 0.53"|bc -ql`
   if [ $TEST -eq 1 ];then
    SECTRAL_TYPE="K"
   fi
   TEST=`echo "$J_K > 0.86"|bc -ql`
   if [ $TEST -eq 1 ];then
    SECTRAL_TYPE="M"
   fi
   TEST=`echo "$J_K > 1.5"|bc -ql`
   if [ $TEST -eq 1 ];then
    SECTRAL_TYPE="Very red!"
   fi
   TEST=`echo "$J_K > 4.0"|bc -ql`
   if [ $TEST -eq 1 ];then
    SECTRAL_TYPE="unrealisitic color!"
   fi
  else
   SECTRAL_TYPE="Sorry, cannot get 2MASS color"
  fi # if [ ! -z $J_K ];then
  # Print results
  echo "r=$R\" J = $J +/-$eJ  Ks = $K +/-$eK  J-Ks =  $J_K +/-$eJ_K  ($SECTRAL_TYPE)"
  echo "Spectral type is according to Bessell & Brett (1988, PASP, 100, 1134) *assuming zero extinction*."
  echo "J-Ks=$J_K+/-$eJ_K ($SECTRAL_TYPE)" > 2mass.tmp
 fi
done

# clean-up after vizquery
if [ -f wget-log ];then
 rm -f wget-log
fi

# by default we don't have an ID
if [ -f search_databases_with_vizquery_USNOB_ID_OK.tmp ];then
 rm -f search_databases_with_vizquery_USNOB_ID_OK.tmp
fi
####
R_SEARCH_ARCSEC=`echo "3.0*($FOV/60)" | bc -ql | awk '{printf "%.1f",$1}'`
B2MAG_RANGE="B2mag=1.0..12.5"
TEST=`echo "$FOV<400.0" | bc -ql`
if [ $TEST -eq 1 ];then
 R_SEARCH_ARCSEC=`echo "3.0*($FOV/60)" | bc -ql | awk '{printf "%.1f",$1}'`
 B2MAG_RANGE="B2mag=1.0..15.5"
fi
TEST=`echo "$FOV<240.0" | bc -ql`
if [ $TEST -eq 1 ];then
 R_SEARCH_ARCSEC=`echo "3.0*($FOV/60)" | bc -ql | awk '{printf "%.1f",$1}'`
 B2MAG_RANGE="B2mag=1.0..16.5"
fi
TEST=`echo "$FOV<120.0" | bc -ql`
if [ $TEST -eq 1 ];then
 R_SEARCH_ARCSEC=3.0
 B2MAG_RANGE="B2mag=1.0..17.5"
fi
TEST=`echo "$FOV<60.0" | bc -ql`
if [ $TEST -eq 1 ];then
 R_SEARCH_ARCSEC=3.0
 B2MAG_RANGE="B2mag=1.0..18.5"
fi
TEST=`echo "$FOV<30.0" | bc -ql`
if [ $TEST -eq 1 ];then
 R_SEARCH_ARCSEC=1.5
 B2MAG_RANGE="B2mag=1.0..20.5"
fi
####
DOUBLE_R_SEARCH_ARCSEC=`echo "$R_SEARCH_ARCSEC*2" | bc -ql`
echo " "
echo "Searching USNO-B1.0 for the brightest objects within $R_SEARCH_ARCSEC\" around $RA $DEC in the range of $B2MAG_RANGE"
#echo " "
echo "$TIMEOUTCOMMAND $VAST_PATH""lib/vizquery -site=$VIZIER_SITE -mime=text -source=USNO-B1 -out.max=10 -out.add=_r -out.form=mini -sort=B2mag  -c="$RA $DEC" $B2MAG_RANGE -c.rs=$R_SEARCH_ARCSEC -out=USNO-B1.0,RAJ2000,DEJ2000,B2mag,B1mag"
$TIMEOUTCOMMAND "$VAST_PATH"lib/vizquery -site=$VIZIER_SITE -mime=text -source=USNO-B1 -out.max=10 -out.add=_r -out.form=mini -sort=B2mag  -c="$RA $DEC" $B2MAG_RANGE -c.rs=$R_SEARCH_ARCSEC -out=USNO-B1.0,RAJ2000,DEJ2000,B2mag,B1mag  2>/dev/null |grep -v \# | grep -v "_" | grep -v "\-\-\-" |grep -v "sec"  |grep -v "RAJ" |grep -v "B" | while read R USNOB1 CATRA_DEG CATDEC_DEG B2 B1 REST ;do
 # skip stars with unknown B2mag
 if [ -z $B2 ] ;then
  continue
 fi
 # skip stars with unknown B1mag
 if [ -z $B1 ] ;then
  continue
 fi
 # skip empty lines if for whatever reason they were not caught before
 if [ ! -z $R ] ;then
  # Skip too faint stars
  TEST=`echo "($B2+$B1)/2.0>18.0"|bc -ql`
  if [ $TEST -eq 1 ];then
   continue
  fi
  GOOD_CATALOG_POSITION=`"$VAST_PATH"lib/deg2hms $CATRA_DEG $CATDEC_DEG` 
  # mark that we have an ID
  echo "$GOOD_CATALOG_POSITION" > search_databases_with_vizquery_USNOB_ID_OK.tmp
  #
  GOOD_CATALOG_NAME=$USNOB1
  echo "***************************************"
  echo "r=$R\" $USNOB1 $GOOD_CATALOG_POSITION B2=$B2"
  #echo " "
  echo "Summary string:"
  GCVS_RESULT=`$TIMEOUTCOMMAND "$VAST_PATH"lib/vizquery -site=$VIZIER_SITE -mime=text -source=B/gcvs -out.max=1 -out.form=mini   -sort=_r -c="$GOOD_CATALOG_POSITION" -c.rs=$DOUBLE_R_SEARCH_ARCSEC -out=GCVS,VarType,Period 2>/dev/null  |grep -v \# | grep -v "_" | grep -v "\-\-\-" |grep -v "GCVS" |head -n2 |tail -n 1`
  GCVS_V=`echo "$GCVS_RESULT" | awk '{print $1}'`
  if [ "$GCVS_V" != "" ] ;then
   # STAR FROM GCVS
   GCVS_CONSTEL=`echo "$GCVS_RESULT" | awk '{print $2}'`
   GCVS_TYPE=`echo "$GCVS_RESULT" | awk '{print $3}'`
   GCVS_PERIOD=`echo "$GCVS_RESULT" | awk '{print $4}'`
   echo -n " $STAR_NAME | $GCVS_V $GCVS_CONSTEL | $GOOD_CATALOG_POSITION | $GCVS_TYPE (GCVS) | $GCVS_PERIOD (GCVS) | "
  else
   VSX_RESULT=`$TIMEOUTCOMMAND "$VAST_PATH"lib/vizquery -site=$VIZIER_SITE -mime=text -source=B/vsx -out.max=1 -out.form=mini   -sort=_r -c="$GOOD_CATALOG_POSITION" -c.rs=$DOUBLE_R_SEARCH_ARCSEC -out=Name,Type,Period |grep -v \# | grep -v "_" | grep -v "\-\-\-" |grep -A1 Name | tail -n1`
   VSX_V=`echo "$VSX_RESULT" | awk '{print $1}'`
   if [ "$VSX_V" != "" ] ;then
    # STAR FROM VSX
    VSX_NAME=`echo "$VSX_RESULT" | awk '{print $2}'`
    VSX_TYPE=`echo "$VSX_RESULT" | awk '{print $3}'`
    VSX_PERIOD=`echo "$VSX_RESULT" | awk '{print $4}'`
    echo -n " $STAR_NAME | $VSX_V $VSX_NAME | $GOOD_CATALOG_POSITION | $VSX_TYPE (VSX) | $VSX_PERIOD (VSX) | "
   else
    # Handle the special case: the stars is in the VSX database but not in the VSX copy at CDS
    VSX_ONLINE_NAME=`"$VAST_PATH"util/search_databases_with_curl.sh $RA $DEC 2>/dev/null | grep -v "not found" | grep -A1 "The object was" | grep -A1 "found" | grep -A1 "VSX" | tail -n1`
    if [ "$VSX_ONLINE_NAME" != "" ] ;then
     echo -n " $STAR_NAME | $VSX_ONLINE_NAME | $GOOD_CATALOG_POSITION | T | P | B2=$B2 "
    else
     # The least likely, but possible case:
     # check if this is a previously-published MDV star?
     MDV_NAME=""
     # SA9
     MDV_RESULT=`lib/vizquery -site=$VIZIER_SITE -mime=text -source=J/AZh/91/382 -out.max=1 -out.form=mini   -sort=_r -c="$GOOD_CATALOG_POSITION" -c.rs="$DOUBLE_R_SEARCH_ARCSEC" -out=MDV,Type,Per |grep -v \# | grep -v "_" | grep -v "\-\-\-" |grep -A1 MDV | tail -n1`
     if [ "$MDV_RESULT" != "" ] ;then
      MDV_NAME=`echo "$MDV_RESULT" | awk '{print $1}'`
      MDV_TYPE=`echo "$MDV_RESULT" | awk '{print $2}'`
      MDV_PERIOD=`echo "$MDV_RESULT" | awk '{print $3}'`
     fi
     if [ "$MDV_NAME" == "" ];then
      MDV_RESULT=`lib/vizquery -site=$VIZIER_SITE -mime=text -source=J/AZh/87/1087/table2 -out.max=1 -out.form=mini   -sort=_r -c="$GOOD_CATALOG_POSITION" -c.rs="$DOUBLE_R_SEARCH_ARCSEC" -out=MDV,Type,Per |grep -v \# | grep -v "_" | grep -v "\-\-\-" |grep -A1 MDV | tail -n1`
      if [ "$MDV_RESULT" != "" ] ;then
       MDV_NAME=`echo "$MDV_RESULT" | awk '{print $1}'`
       MDV_TYPE=`echo "$MDV_RESULT" | awk '{print $2}'`
       MDV_PERIOD=`echo "$MDV_RESULT" | awk '{print $3}'`
      fi
     fi
     if [ "$MDV_NAME" == "" ];then
      MDV_RESULT=`lib/vizquery -site=$VIZIER_SITE -mime=text -source=J/AZh/87/1087/table1 -out.max=1 -out.form=mini   -sort=_r -c="$GOOD_CATALOG_POSITION" -c.rs="$DOUBLE_R_SEARCH_ARCSEC" -out=MDV,Type |grep -v \# | grep -v "_" | grep -v "\-\-\-" |grep -A1 MDV | tail -n1`
      if [ "$MDV_RESULT" != "" ] ;then
       MDV_NAME=`echo "$MDV_RESULT" | awk '{print $1}'`
       MDV_TYPE=`echo "$MDV_RESULT" | awk '{print $2}'`
       MDV_PERIOD="0.0"
      fi
     fi
     if [ "$MDV_NAME" != "" ];then
      # MDV var
      echo -n " $STAR_NAME | MDV $MDV_NAME | $GOOD_CATALOG_POSITION | $MDV_TYPE (MDV) | $MDV_PERIOD (MDV) | "
     else
      # NEW var
      echo -n " $STAR_NAME | B1.0 $GOOD_CATALOG_NAME | $GOOD_CATALOG_POSITION | T | P | B2=$B2 "
     fi # if [ "$MDV_NAME" != "" ];then
    fi
   fi
  fi
  if [ -f 2mass.tmp ];then
   cat 2mass.tmp
  fi
  echo "***************************************"
  break
 fi
done
if [ -f 2mass.tmp ];then
 rm -f 2mass.tmp
fi
if [ -f usno.tmp ];then
 rm -f usno.tmp
fi
# clean-up after vizquery
if [ -f wget-log ];then
 rm -f wget-log
fi



if [ ! -f search_databases_with_vizquery_USNOB_ID_OK.tmp ];then
 echo "Could not match the source with USNO-B1.0 :("
 exit 1
else
 rm -f search_databases_with_vizquery_USNOB_ID_OK.tmp
fi
